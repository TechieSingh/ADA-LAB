#include<iostream>

using namespace std;

bool isSafe(int board[][10],int i,int j,int n){
	//you can check for col;
	for(int row=0;row<i;row++){
	if(board[row][j]==1){
	return false;
		}
	}
	//you can check for left Diagonal
	int x=i;
	int y =j;
	
	while(x>=0 && y>=0){
		if(board[x][y]==1){
		return false;
		}
		x--;
		y--;
	}
	//you can check for right diagonal
	x=i;
	y=j;
	
	while(x>=0 && y<n){
		if(board[x][y]==1){
		return false;
		}
		x--;
		y++;
	}
	return true;
}

bool solveNQueen(int board[][10],int i,int n)
{
	if(i==n){
	//you have successfully placed queens in n rows(0...n-1);
	//print the board;
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			if(board[i][j]==1){
				cout<<"Q ";
			}
			else{
				cout<<"# ";
				}
			}
			cout<<endl;
		}
		
		cout<<endl<<endl;
	return false;
	}
	
	//recursive case;
	//try to place the queen in the current row and call on remaining part which will be solved by recursion;
	for(int j=0;j<n;j++){
	//I have to check if i,j position is safe to place the queen or not.
	if(isSafe(board,i,j,n)){
		//place the queen assuming i,j is the right position
		board[i][j]=1;
		
		bool nextQueenRakhPaye = solveNQueen(board,i+1,n);
		if(nextQueenRakhPaye){
		return true;
			}
		//means i,j is not the right position.
		board[i][j]=0;
		}
	}
	//you have tried for all position in the current row but couldn't place a queen.
	return false;
	

}

int main()
{
	int n;
	cout<<"Enter the no. of queens?\n";
	cin>>n;
	int board[10][10]={0};
	solveNQueen(board,0,n);
	

return 0;
}
